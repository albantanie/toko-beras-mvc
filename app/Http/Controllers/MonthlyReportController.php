<?php

namespace App\Http\Controllers;

use App\Models\DailyReport;
use App\Models\PdfReport;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Inertia\Inertia;
use Inertia\Response;
use Barryvdh\DomPDF\Facade\Pdf;
use Illuminate\Support\Facades\Storage;

class MonthlyReportController extends Controller
{
    /**
     * Generate monthly report from daily reports
     */
    public function generateFromDaily(Request $request): JsonResponse|RedirectResponse
    {
        try {
            $request->validate([
                'month' => 'required|date_format:Y-m',
                'type' => 'required|in:transaction,stock',
            ]);
        } catch (\Illuminate\Validation\ValidationException $e) {
            return response()->json([
                'error' => 'Data tidak valid: ' . implode(', ', $e->validator->errors()->all())
            ], 422);
        }

        $user = auth()->user();
        $month = Carbon::createFromFormat('Y-m', $request->month);
        $type = $request->type;

        // Check if user has permission to generate this type of report
        if ($type === 'transaction' && !$user->isKasir()) {
            return response()->json(['error' => 'Only kasir can generate transaction reports'], 403);
        }

        if ($type === 'stock' && !$user->isKaryawan()) {
            return response()->json(['error' => 'Only karyawan can generate stock reports'], 403);
        }

        // Check if monthly report already exists for this user, month, and type
        $existingReport = PdfReport::where('type', $type === 'transaction' ? 'penjualan' : 'stok')
            ->where('generated_by', $user->id)
            ->whereYear('period_from', $month->year)
            ->whereMonth('period_from', $month->month)
            ->first();

        if ($existingReport) {
            return response()->json([
                'error' => 'Laporan bulanan untuk bulan ' . $month->format('F Y') . ' sudah pernah dibuat. Setiap bulan hanya boleh generate sekali untuk mencegah duplikasi data.'
            ], 400);
        }

        // Check if monthly report already exists for this month and user
        $reportType = $type === 'transaction' ? 'sales' : 'stock';
        $existingReport = PdfReport::where('generated_by', $user->id)
            ->where('type', $reportType)
            ->where('period_from', $month->startOfMonth()->format('Y-m-d'))
            ->where('period_to', $month->endOfMonth()->format('Y-m-d'))
            ->first();

        if ($existingReport) {
            $statusLabel = $this->getStatusLabel($existingReport->status);
            return response()->json([
                'error' => "Laporan bulanan untuk bulan {$month->format('F Y')} sudah pernah di-generate dengan status: {$statusLabel}. Silakan cek di bagian 'Status Laporan Bulanan' di bawah."
            ], 400);
        }

        try {
            // Check if daily reports exist for this month, if not try to auto-generate
            $startDate = $month->copy()->startOfMonth();
            $endDate = $month->copy()->endOfMonth();

            $existingReports = DailyReport::where('type', $type)
                ->where('user_id', $user->id)
                ->where('status', DailyReport::STATUS_COMPLETED)
                ->whereBetween('report_date', [$startDate, $endDate])
                ->count();

            if ($existingReports === 0) {
                // Try to auto-generate daily reports for this month
                $this->autoGenerateDailyReports($month, $type, $user->id);
            }

            // Generate monthly summary from daily reports
            $monthlySummary = DailyReport::generateMonthlySummary($month, $type, $user->id);

            if ($monthlySummary['reports_included'] === 0) {
                return response()->json([
                    'error' => 'Tidak ada data laporan harian untuk bulan ' . $month->format('F Y') . '. Pastikan ada transaksi atau aktivitas stok pada bulan tersebut.'
                ], 400);
            }

            // Create monthly report for owner approval
            $reportTitle = $type === 'transaction'
                ? "Laporan Penjualan Bulanan - {$monthlySummary['period']['month_name']}"
                : "Laporan Stok Bulanan - {$monthlySummary['period']['month_name']}";

            // Generate PDF file
            $fileName = $this->generateMonthlyPDF($monthlySummary, $month, $type, $user);

            $report = PdfReport::create([
                'title' => $reportTitle,
                'type' => $type === 'transaction' ? 'sales' : 'stock',
                'report_date' => $month->endOfMonth(),
                'period_from' => $monthlySummary['period']['from'],
                'period_to' => $monthlySummary['period']['to'],
                'file_name' => $fileName,
                'file_path' => 'reports/' . $fileName,
                'report_data' => $monthlySummary,
                'generated_by' => $user->id,
                'status' => 'pending', // Needs owner approval
            ]);

            return response()->json([
                'success' => true,
                'message' => 'Monthly report generated successfully and sent for owner approval',
                'report' => [
                    'id' => $report->id,
                    'title' => $report->title,
                    'period' => $monthlySummary['period'],
                    'summary' => $monthlySummary['summary'],
                ]
            ]);

        } catch (\Exception $e) {
            \Log::error('Monthly report generation failed', [
                'user_id' => $user->id,
                'month' => $request->month,
                'type' => $type,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return response()->json([
                'error' => 'Gagal generate laporan bulanan: ' . $e->getMessage() . '. Silakan coba lagi atau hubungi administrator.'
            ], 500);
        }
    }

    /**
     * Show monthly report generation page
     */
    public function create(): Response
    {
        $user = auth()->user();

        // Only kasir and karyawan can generate monthly reports
        if (!$user->isKasir() && !$user->isKaryawan()) {
            abort(403, 'Only kasir and karyawan can generate monthly reports');
        }

        $availableMonths = $this->getAvailableMonths($user);
        $generatedReports = $this->getGeneratedReports($user);

        return Inertia::render('laporan/monthly-generate', [
            'user_role' => $user->roles->first()->name,
            'available_months' => $availableMonths,
            'generated_reports' => $generatedReports,
        ]);
    }

    /**
     * Generate monthly PDF report
     */
    private function generateMonthlyPDF(array $monthlyData, Carbon $month, string $type, $user): string
    {
        $fileName = sprintf(
            'monthly_%s_%s.pdf',
            $type === 'transaction' ? 'sales' : 'stock',
            $month->format('Y_m')
        );

        // Ensure reports directory exists
        if (!Storage::exists('reports')) {
            Storage::makeDirectory('reports');
        }

        // Generate PDF based on type
        if ($type === 'transaction') {
            $pdf = Pdf::loadView('pdf.monthly-sales-report', [
                'data' => $monthlyData,
                'month' => $month,
                'user' => $user,
                'generated_at' => now(),
            ]);
        } else {
            $pdf = Pdf::loadView('pdf.monthly-stock-report', [
                'data' => $monthlyData,
                'month' => $month,
                'user' => $user,
                'generated_at' => now(),
            ]);
        }

        // Save PDF
        Storage::put('reports/' . $fileName, $pdf->output());

        \Log::info('Monthly PDF generated', [
            'file_name' => $fileName,
            'file_path' => 'reports/' . $fileName,
            'type' => $type,
            'month' => $month->format('Y-m'),
            'user_id' => $user->id
        ]);

        return $fileName;
    }

    /**
     * Get generated reports for the user
     */
    private function getGeneratedReports($user): array
    {
        $reportType = $user->isKasir() ? 'sales' : 'stock';

        $reports = PdfReport::where('generated_by', $user->id)
            ->where('type', $reportType)
            ->orderBy('period_from', 'desc')
            ->get()
            ->map(function ($report) {
                return [
                    'id' => $report->id,
                    'title' => $report->title,
                    'period_from' => $report->period_from,
                    'period_to' => $report->period_to,
                    'month_year' => Carbon::parse($report->period_from)->format('Y-m'),
                    'month_label' => Carbon::parse($report->period_from)->format('F Y'),
                    'status' => $report->status,
                    'status_label' => $this->getStatusLabel($report->status),
                    'status_color' => $this->getStatusColor($report->status),
                    'generated_at' => $report->created_at->format('d/m/Y H:i'),
                    'approved_at' => $report->approved_at ? $report->approved_at->format('d/m/Y H:i') : null,
                    'approval_notes' => $report->approval_notes,
                ];
            })
            ->toArray();

        return $reports;
    }

    /**
     * Get status label in Indonesian
     */
    private function getStatusLabel(string $status): string
    {
        return match($status) {
            'pending' => 'Menunggu Persetujuan',
            'approved' => 'Disetujui',
            'rejected' => 'Ditolak',
            default => 'Unknown'
        };
    }

    /**
     * Get status color for UI
     */
    private function getStatusColor(string $status): string
    {
        return match($status) {
            'pending' => 'yellow',
            'approved' => 'green',
            'rejected' => 'red',
            default => 'gray'
        };
    }

    /**
     * Get available months that have daily reports
     */
    private function getAvailableMonths($user): array
    {
        $userRole = $user->roles->first()->name;
        $reportType = $userRole === 'kasir' ? 'transaction' : 'stock';

        // Get all daily reports for this user and type
        $reports = DailyReport::where('type', $reportType)
            ->where('user_id', $user->id)
            ->where('status', DailyReport::STATUS_COMPLETED)
            ->select('report_date')
            ->get();

        // Group by month manually
        $monthsData = [];
        foreach ($reports as $report) {
            $monthKey = Carbon::parse($report->report_date)->format('Y-m');
            if (!isset($monthsData[$monthKey])) {
                $monthsData[$monthKey] = 0;
            }
            $monthsData[$monthKey]++;
        }

        // Convert to array format
        $months = [];
        foreach ($monthsData as $monthKey => $count) {
            $date = Carbon::createFromFormat('Y-m', $monthKey);
            $months[] = [
                'value' => $monthKey,
                'label' => $date->format('F Y'),
                'report_count' => $count,
            ];
        }

        // Sort by month descending
        usort($months, function($a, $b) {
            return strcmp($b['value'], $a['value']);
        });

        // If no months available, add current month and previous months as options
        if (empty($months)) {
            // Add current month
            $currentMonth = Carbon::now();
            $months[] = [
                'value' => $currentMonth->format('Y-m'),
                'label' => $currentMonth->format('F Y'),
                'report_count' => 0,
            ];

            // Add previous month
            $previousMonth = Carbon::now()->subMonth();
            $months[] = [
                'value' => $previousMonth->format('Y-m'),
                'label' => $previousMonth->format('F Y'),
                'report_count' => 0,
            ];

            // Add month before that
            $twoMonthsAgo = Carbon::now()->subMonths(2);
            $months[] = [
                'value' => $twoMonthsAgo->format('Y-m'),
                'label' => $twoMonthsAgo->format('F Y'),
                'report_count' => 0,
            ];
        }

        return $months;
    }

    /**
     * Get monthly summary preview
     */
    public function preview(Request $request): JsonResponse
    {
        try {
            $request->validate([
                'month' => 'required|date_format:Y-m',
                'type' => 'required|in:transaction,stock',
            ]);
        } catch (\Illuminate\Validation\ValidationException $e) {
            return response()->json([
                'error' => 'Data tidak valid: ' . implode(', ', $e->validator->errors()->all())
            ], 422);
        }

        $user = auth()->user();
        $month = Carbon::createFromFormat('Y-m', $request->month);
        $type = $request->type;

        \Log::info('Monthly report preview request', [
            'user_id' => $user->id,
            'month' => $request->month,
            'type' => $type,
            'user_roles' => $user->roles->pluck('name')->toArray()
        ]);

        try {
            // Check if daily reports exist for this month, if not try to auto-generate
            $startDate = $month->copy()->startOfMonth();
            $endDate = $month->copy()->endOfMonth();

            $existingReports = DailyReport::where('type', $type)
                ->where('user_id', $user->id)
                ->where('status', DailyReport::STATUS_COMPLETED)
                ->whereBetween('report_date', [$startDate, $endDate])
                ->count();

            if ($existingReports === 0) {
                // Try to auto-generate daily reports for this month
                $this->autoGenerateDailyReports($month, $type, $user->id);

                // Recheck after auto-generation
                $existingReports = DailyReport::where('type', $type)
                    ->where('user_id', $user->id)
                    ->where('status', DailyReport::STATUS_COMPLETED)
                    ->whereBetween('report_date', [$startDate, $endDate])
                    ->count();
            }

            if ($existingReports === 0) {
                // Create a dummy preview to show what would be generated
                $dummyPreview = [
                    'reports_included' => 0,
                    'period' => [
                        'start' => $startDate->format('Y-m-d'),
                        'end' => $endDate->format('Y-m-d'),
                        'month_name' => $month->format('F Y')
                    ],
                    'summary' => [
                        'total_amount' => 0,
                        'total_transactions' => 0,
                        'total_items_sold' => 0,
                        'average_per_day' => 0
                    ],
                    'message' => 'Belum ada data untuk bulan ini. Laporan akan di-generate otomatis saat Anda memilih "Generate Laporan".'
                ];

                return response()->json([
                    'success' => true,
                    'preview' => $dummyPreview
                ]);
            }

            $monthlySummary = DailyReport::generateMonthlySummary($month, $type, $user->id);

            return response()->json([
                'success' => true,
                'preview' => $monthlySummary
            ]);

        } catch (\Exception $e) {
            \Log::error('Monthly report preview failed', [
                'user_id' => $user->id,
                'month' => $request->month,
                'type' => $type,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return response()->json([
                'error' => 'Gagal membuat preview: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Auto-generate daily reports for a month if they don't exist
     */
    private function autoGenerateDailyReports(Carbon $month, string $type, int $userId): void
    {
        $startDate = $month->copy()->startOfMonth();
        $endDate = $month->copy()->endOfMonth();

        \Log::info("Auto-generating daily reports", [
            'month' => $month->format('Y-m'),
            'type' => $type,
            'user_id' => $userId,
            'start_date' => $startDate->format('Y-m-d'),
            'end_date' => $endDate->format('Y-m-d')
        ]);

        // Generate daily reports for each day that has data
        $currentDate = $startDate->copy();
        $generatedCount = 0;

        while ($currentDate->lte($endDate)) {
            // Check if report already exists for this date
            $existingReport = DailyReport::where('type', $type)
                ->where('user_id', $userId)
                ->where('report_date', $currentDate->format('Y-m-d'))
                ->first();

            if (!$existingReport) {
                try {
                    if ($type === 'transaction') {
                        // Check if there are transactions for this date
                        $transactions = \App\Models\Penjualan::where('user_id', $userId)
                            ->where('status', 'selesai')
                            ->whereDate('tanggal_transaksi', $currentDate)
                            ->get();

                        if ($transactions->count() > 0) {
                            \Log::info("Generating transaction report for {$currentDate->format('Y-m-d')}", [
                                'transactions_count' => $transactions->count()
                            ]);
                            DailyReport::generateTransactionReport($currentDate, $userId);
                            $generatedCount++;
                        }
                    } else {
                        // Check if there are stock movements for this date
                        $stockMovements = \App\Models\StockMovement::where('user_id', $userId)
                            ->whereDate('created_at', $currentDate)
                            ->get();

                        if ($stockMovements->count() > 0) {
                            \Log::info("Generating stock report for {$currentDate->format('Y-m-d')}", [
                                'movements_count' => $stockMovements->count()
                            ]);
                            DailyReport::generateStockReport($currentDate, $userId);
                            $generatedCount++;
                        }
                    }
                } catch (\Exception $e) {
                    // Log error but continue with next date
                    \Log::warning("Failed to auto-generate daily report for {$currentDate->format('Y-m-d')}: " . $e->getMessage());
                }
            }

            $currentDate->addDay();
        }

        \Log::info("Auto-generation completed", [
            'generated_reports' => $generatedCount
        ]);
    }

    /**
     * Check if there's data available for a month to generate reports
     */
    private function hasDataForMonth($user, string $reportType, Carbon $month): bool
    {
        $startDate = $month->copy()->startOfMonth();
        $endDate = $month->copy()->endOfMonth();

        if ($reportType === 'transaction') {
            return \App\Models\Penjualan::where('user_id', $user->id)
                ->where('status', 'selesai')
                ->whereBetween('tanggal_transaksi', [$startDate, $endDate])
                ->exists();
        } else {
            return \App\Models\StockMovement::where('user_id', $user->id)
                ->whereBetween('created_at', [$startDate, $endDate])
                ->exists();
        }
    }
}
