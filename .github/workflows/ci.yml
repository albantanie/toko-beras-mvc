name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv
          tools: composer:v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Install Node dependencies
        run: npm ci

      - name: Run PHP CS Fixer (dry-run)
        run: |
          if [ -f "vendor/bin/php-cs-fixer" ]; then
            vendor/bin/php-cs-fixer fix --dry-run --diff --verbose
          else
            echo "PHP CS Fixer not installed, skipping..."
          fi

      - name: Run PHPStan
        run: |
          if [ -f "vendor/bin/phpstan" ]; then
            vendor/bin/phpstan analyse --memory-limit=2G
          else
            echo "PHPStan not installed, skipping..."
          fi

      - name: Run ESLint
        run: |
          if [ -f "node_modules/.bin/eslint" ]; then
            npm run lint
          else
            echo "ESLint not configured, skipping..."
          fi

      - name: Run Prettier check
        run: |
          if [ -f "node_modules/.bin/prettier" ]; then
            npm run format:check
          else
            echo "Prettier not configured, skipping..."
          fi

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: ['8.1', '8.2']

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: toko_beras_test
          POSTGRES_USER: toko_beras_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U toko_beras_user -d toko_beras_test" --health-interval=10s --health-timeout=5s --health-retries=5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pdo_pgsql, bcmath, soap, intl, gd, exif, iconv
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Install Node dependencies
        run: npm ci

      - name: Create .env file
        run: |
          cp .env.example .env
          php artisan key:generate
          sed -i 's/DB_CONNECTION=sqlite/DB_CONNECTION=pgsql/' .env
          sed -i 's/# DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
          sed -i 's/# DB_PORT=3306/DB_PORT=5432/' .env
          sed -i 's/# DB_DATABASE=laravel/DB_DATABASE=toko_beras_test/' .env
          sed -i 's/# DB_USERNAME=root/DB_USERNAME=toko_beras_user/' .env
          sed -i 's/# DB_PASSWORD=/DB_PASSWORD=test_password/' .env
          echo "CACHE_DRIVER=redis" >> .env
          echo "SESSION_DRIVER=redis" >> .env
          echo "QUEUE_CONNECTION=redis" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Run database seeders
        run: php artisan db:seed --force

      - name: Build frontend assets
        run: npm run build

      - name: Run PHP tests with coverage
        run: php artisan test --coverage --min=80

      - name: Upload coverage reports to Codecov
        if: matrix.php-version == '8.2'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Run security audit
        run: |
          if [ -f "vendor/bin/security-checker" ]; then
            vendor/bin/security-checker security:check composer.lock
          else
            echo "Security checker not installed, using composer audit..."
            composer audit
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

  build:
    name: Build Assets
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production assets
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-assets
          path: public/build/
          retention-days: 7

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: toko-beras:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name toko-beras-test -p 8080:80 toko-beras:test
          sleep 10
          
          # Test if the application is responding
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080 || echo "000")
          
          if [ "$response" = "200" ] || [ "$response" = "302" ]; then
            echo "✅ Docker image is working (HTTP $response)"
          else
            echo "❌ Docker image is not responding properly (HTTP $response)"
            docker logs toko-beras-test
            exit 1
          fi
          
          docker stop toko-beras-test
