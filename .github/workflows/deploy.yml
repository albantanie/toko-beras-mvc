name: Deploy Toko Beras to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: toko_beras_test
          POSTGRES_USER: toko_beras_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready -U toko_beras_user -d toko_beras_test" --health-interval=10s --health-timeout=5s --health-retries=5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, pdo_pgsql, bcmath, soap, intl, gd, exif, iconv
          coverage: none

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install PHP dependencies
        run: composer install --no-dev --optimize-autoloader --no-interaction

      - name: Install Node dependencies
        run: npm ci

      - name: Create .env file
        run: |
          cp .env.example .env
          php artisan key:generate
          sed -i 's/DB_CONNECTION=sqlite/DB_CONNECTION=pgsql/' .env
          sed -i 's/# DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/' .env
          sed -i 's/# DB_PORT=3306/DB_PORT=5432/' .env
          sed -i 's/# DB_DATABASE=laravel/DB_DATABASE=toko_beras_test/' .env
          sed -i 's/# DB_USERNAME=root/DB_USERNAME=toko_beras_user/' .env
          sed -i 's/# DB_PASSWORD=/DB_PASSWORD=test_password/' .env
          echo "CACHE_DRIVER=redis" >> .env
          echo "SESSION_DRIVER=redis" >> .env
          echo "QUEUE_CONNECTION=redis" >> .env
          echo "REDIS_HOST=127.0.0.1" >> .env
          echo "REDIS_PORT=6379" >> .env

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Run database seeders
        run: php artisan db:seed --force

      - name: Build frontend assets
        run: npm run build

      - name: Run PHP tests
        run: php artisan test

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://toko-beras.faiz-dev.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Production Server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e

            echo "🚀 Starting deployment to production..."

            # Navigate to project directory
            cd /home/faiz/docker/toko-beras-compose

            # Check if directory exists
            if [ ! -d ".git" ]; then
              echo "❌ Git repository not found in $(pwd)"
              exit 1
            fi

            # Backup current state
            echo "📦 Creating backup..."
            cp -r . ../toko-beras-backup-$(date +%Y%m%d_%H%M%S) || true

            # Pull latest changes
            echo "📥 Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main
            git clean -fd

            # Check if docker-compose.yml exists
            if [ ! -f "docker-compose.yml" ]; then
              echo "❌ docker-compose.yml not found"
              exit 1
            fi

            # Create/update .env file with production settings
            echo "🔧 Updating environment configuration..."
            cat > .env << 'ENVEOF'
            APP_NAME="Toko Beras"
            APP_ENV=production
            APP_DEBUG=false
            APP_URL=http://faiz-dev.com:8080
            APP_KEY=${{ secrets.APP_KEY }}

            LOG_CHANNEL=stack
            LOG_DEPRECATIONS_CHANNEL=null
            LOG_LEVEL=error

            DB_CONNECTION=pgsql
            DB_HOST=postgres
            DB_PORT=5432
            DB_DATABASE=toko_beras
            DB_USERNAME=toko_beras_user
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}

            CACHE_DRIVER=redis
            SESSION_DRIVER=redis
            SESSION_LIFETIME=120
            QUEUE_CONNECTION=redis

            REDIS_HOST=redis
            REDIS_PASSWORD=
            REDIS_PORT=6379

            MAIL_MAILER=smtp
            MAIL_HOST=mailpit
            MAIL_PORT=1025
            MAIL_USERNAME=null
            MAIL_PASSWORD=null
            MAIL_ENCRYPTION=null
            MAIL_FROM_ADDRESS="noreply@tokoberas.com"
            MAIL_FROM_NAME="Toko Beras"

            FILESYSTEM_DISK=local
            BROADCAST_DRIVER=log
            VITE_APP_NAME="Toko Beras"
            ENVEOF

            # Stop containers gracefully
            echo "🛑 Stopping containers..."
            docker compose down --timeout 30

            # Pull latest images
            echo "📦 Pulling latest Docker images..."
            docker compose pull

            # Build and start containers
            echo "🔨 Building and starting containers..."
            docker compose up -d --remove-orphans

            # Wait for containers to be ready
            echo "⏳ Waiting for containers to be ready..."
            sleep 45

            # Check container health
            echo "🔍 Checking container health..."
            docker compose ps

            # Run Laravel commands inside container
            echo "🔧 Running Laravel maintenance commands..."
            docker compose exec -T toko-beras php artisan config:cache
            docker compose exec -T toko-beras php artisan route:cache
            docker compose exec -T toko-beras php artisan view:cache
            docker compose exec -T toko-beras php artisan migrate --force

            # Clear old Docker images
            echo "🧹 Cleaning up old Docker images..."
            docker image prune -f

            echo "✅ Deployment completed successfully!"
            echo "🌐 Application is available at: http://faiz-dev.com:8080"
          EOF

      - name: Verify Deployment
        run: |
          echo "🔍 Verifying deployment..."

          # Wait a bit for the application to fully start
          sleep 15

          # Check if the application is responding
          response=$(curl -s -o /dev/null -w "%{http_code}" http://faiz-dev.com:8080 || echo "000")

          if [ "$response" = "200" ] || [ "$response" = "302" ]; then
            echo "✅ Application is responding (HTTP $response)"
          else
            echo "❌ Application is not responding properly (HTTP $response)"
            # Try to get more info about the issue
            ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'DEBUGEOF'
              cd /home/faiz/docker/toko-beras-compose
              echo "Container status:"
              docker compose ps
              echo "Application logs:"
              docker compose logs --tail=20 toko-beras
            DEBUGEOF
            exit 1
          fi

      - name: Notify Deployment Status
        if: always()
        run: |
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment to production completed successfully!"
            echo "🌐 Application URL: http://faiz-dev.com:8080"
            echo "📊 Dashboard: http://faiz-dev.com:8080/dashboard"
            echo "📧 Mailpit: http://faiz-dev.com:8025"
          else
            echo "❌ Deployment failed!"
            echo "🔍 Check the logs above for details"
          fi

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()
    
    steps:
      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Rollback to Previous Version
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -e
            
            echo "🔄 Starting rollback process..."
            
            cd /home/faiz/docker/toko-beras-compose
            
            # Find the latest backup
            latest_backup=$(ls -t ../toko-beras-backup-* 2>/dev/null | head -n1 || echo "")
            
            if [ -n "$latest_backup" ] && [ -d "$latest_backup" ]; then
              echo "📦 Rolling back to: $latest_backup"
              
              # Stop current containers
              docker compose down --timeout 30
              
              # Restore from backup
              cp -r "$latest_backup"/* .
              
              # Start containers with previous version
              docker compose up -d
              
              echo "✅ Rollback completed successfully!"
            else
              echo "❌ No backup found for rollback"
              echo "🔧 Attempting to restart current containers..."
              docker compose up -d
            fi
          EOF

      - name: Notify Rollback
        run: |
          echo "🔄 Rollback process completed"
          echo "🔍 Please check the application status manually"
